type Query {
  users: [User!]!
  posts: [Post!]!
  me: User
  publishedPosts: [Post!]!
  post(postId: ID!): Post
  postsByUser(userId: ID!): [Post!]!
}

type Mutation {
  signup(firstName: String!, lastName: String!, userName: String!, email: String!, password: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  logout: SuccessMessage
  updateUserInfos(userId: ID!, firstName: String!, lastName: String!, password: String!): AuthPayload
  addPost(title: String!, published: Boolean!, userId: ID!): Post
  updatePost(postId: ID!, title: String!, published: Boolean!, userId: ID!): Post
  removePost(postId: ID!): Post
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  userName: String!
  email: String!
  password: String!
  profilePic: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  published: Boolean!
  author: User
}

type SuccessMessage {
  message: String
}

type AuthPayload {
  token: String
  user: User
}
